-- Good video for to learn about recursion SQL: 
-- https://www.youtube.com/watch?v=7hZYh9qXxe4&t=687s

-- Define a CTE for an IT organization (select managers using a CTE): 

-- 1. pull data of all people that are managers
WITH JOBS (id, Name, JobTitle) AS  
(
SELECT 
  ID, 
  Name, 
  Position
FROM employee
WHERE Position like '%Manager%'
),

--2. pull data of all people whose salary > $10,000
SALARIES(id, salary) AS 
(
SELECT 
  ID, 
  Salary
FROM ITSalary
WHERE Salary > 10000
)

SELECT 
JOBS.Name, JOBS.Position, SALARIES.Salary
FROM JOBS
INNER JOIN SALARIES
ON JOBS.ID = SALARIES.ID;


--Exercise 1: 
-- Create a CTE called ITjobs where we want to find any positions that start with IT and their name starts with an A 
-- and whose salary is >$3000

WITH ITjobs (Id, Name, Position) AS (
SELECT 
ID, 
Name, 
Position
FROM employee
WHERE Position LIKE 'IT%' and Name LIKE 'A%'
), 

ITsalary (Id, Salary) AS (
SELECT 
ID, 
Salary
FROM Salary
WHERE Salary > 3000)

Select
ITjobs.Name, 
ITjobs.Position, 
ITsalary.Salary
FROM ITjobs
INNER JOIN Salary
ON ITjobs.Id = Salary.Id;

-- Recursion: 
-- Advantages: 
  -- solve problems that involve recursion (i.e. finding the past 5 generations of parents in your lineage)
  -- recursion should be limited by a termination condition

-- Disadvantages: 
  -- slow execution time

--Example: Finding the sum of consecutive numbers using CTEs

With calculate_SumOfNumber AS (
SELECT 
  1 as iteration, 
  1 as SumofNumber
  UNION ALL

-- Recursive Part
Select iteration + 1, SUMofNumber + (iteration + 1)
FROM calculate_SumofNumber
WHERE iteration < 6
)

Select SumofNumber
FROM calculate_SumofNumber;
)

-- Use DECLARE @local_variabe to define variables in a SQL server

-- Exercise 2: Calculate a factorial of 5: Iteratively

DECLARE @target float = 5 -- define the factorial number
DECLARE @factorial float = 1 -- initial this variable to a specific value

WHILE @target > 0: 
BEGIN
  SET @factorial = @factorial * @target
  SET @target = @target - 1
END

SELECT @factorial;
 -- 1. here we start with factorial = 1 and target = 5 -> 1*5 = 5
 -- 2. then factorial = 5 and target = 4 -> 5*4 = 20
 -- 3. factorial = 20 and target = 3 -> (20) * 3 = (5*4) * 3 = 60
 -- etc.

-- Exercise 2b: Calculate a factorial of 6: Recursively:
With calculate_factorial AS (
SELECT 
  1 as step, 
  1 as factorial
UNION ALL 
SELECT
  step + 1, 
  factorial * (step+1)
FROM calculate_factorial
WHERE step < 6
)

select factorial 
from calculate_factorial;
)

-- Exercise: Write a cursive SQL statement to count numbers from 1-50: 
  -- here the where clause states that the last step will be step 49 where number = 49+1 which would output the last number as 50. 

WITH counting_numbers as (
select 
1 as number
UNION ALL
select 
number = number + 1
FROM counting_numbers
WHERE number <= 49 
)
select number
from counting_numbers

-- Tip: for a recursion that requires more than 100 steps, increase the number of recursion steps to up to you 32,767 times: OPTION(MAXRECURSION 32767)

-- Tip: The following SQL statements are NOT allowed: Group by, having, left join, right join, outer join, select distinct, subqueries, TOP

-- Number of columns for anchor and recursive members are the same
-- the data types of anchor and recursive members are the same

-- Exercise: Create the alphabet recursively: you can use char(number) to convert a number to its corresponding number. char(65) = A

WITH alphabet as (
select
  number_of_letter = 65
UNION ALL

SELECT
  number_of_letter+1
FROM alphabet
WHERE number_of_letter < 65+25
)

SELECT char(number_of_letter)
FROM alphabet

-- Exercise: Create a recursive time series to get every single day for 365 days from today's date

WITH time_series AS (
SELECT 
  GETDATE() as time
UNION ALL 
SELECT 
  time= DATEADD(day, 1, time)
FROM time_series
WHERE time <= GETDATE() + 364
)
select time
from time_series
OPTION(MAXRECURSION 365) -- set max recursion to 365 to increase the limit

-- Recursive Hierarchical example from youtube 
  -- not a fan of the datacamp module for this one


--Exercise: Find all the employees under Asha: 
  --1. here we select our initial row of Asha
  --2. we want to find all the IDs that are under Asha and we will do that by comparing Asha's ID to the manager_id column in the original table
  --3. so the recursive part is showing that we for Asha'a id the recursive id, we will find the managaer_id associated with that in the original column and return the worker_id for employees.

WITH recursive emp_hierarchy as 
(
SELECT 
  ID, name, manager_id, designation, 1 as level
from emp_details where name = 'Asha'
UNION
SELECT 
  E.Id, E.name
FROM emp_hierarchy as recursive_CTE
INNER JOIN emp_details as original_table
ON recursive_CTE.id = emp_details.manager_id
)

select * from emp_hierarchy

-- Exercise: Find the hierarchy of managers for a given employee "David" (over David). opposite of the earlier exercise

WITH recursive emp_hierarchy as (
SELECT id, name, manager_id, designation, 1 as lvl
  FROM EMP_Details
  WHERE name = 'David'
UNION
SELECT E.id, E.name, E.manager_id, E.designation, H.lvl + 1 as lvl
FROM emp_hierarchy as H
JOIN emp_details E on H.manager_id = E.id
)

-- Here instead of adding the manager's name in the anchor part which doesn't exist we can return manager's name at the end since it's just looking matching the id from the original table
select 
emp_hierarchy.id, 
emp_hierarchy.name as Employee_name,
emp_details.name as Managers_name, -- this is from the details table
emp_hiearchy.lvl as level
from emp_hierarchy 
LEFT JOIN emp_details as e
ON emp_hierarchy.manager_id = emp_details.id


-- Creating, Inserting, Updating, Deleting, and dropping a table: 

-- Exercise: create a table with columns that can't be blank 
CREATE TABLE person (
IndividualID INT NOT NULL, 
FirstName VARCHAR(255) NOT NULL,
LastName VARCHAR(255) NOT NULL, 
Address VARCHAR(255) NOT NULL, 
City CHAR(32) NOT NULL, 
Birthday DATE NOT NULL
);

select *
from 
person

-- How to Insert and update a table for employee

-- Inserting a single row of data
INSERT INTO Events (EventName, EventDate, EventLocation)
VALUES ('Birthday Party', '2024-04-15', 'City Park');

-- Inserting multiple rows of data
INSERT INTO Events (EventName, EventDate, EventLocation)
VALUES 
    ('Graduation Ceremony', '2024-05-25', 'University Auditorium'),
    ('Music Concert', '2024-06-10', 'Outdoor Arena');

--- Updating Data (UPDATE statement):
-- Update the EventLocation for a specific event where event Name = 'Music Concert'
UPDATE Events
SET EventLocation = 'Indoor Arena'
WHERE EventName = 'Music Concert';

-- Update multiple columns for a specific event
UPDATE Events
SET EventDate = '2024-06-12', EventLocation = 'Convention Center'
WHERE EventName = 'Graduation Ceremony';

--  we're updating both the EventDate and EventLocation for the event with the name 'Graduation Ceremony'.

--- Update multiple columns where EventId = 1:
UPDATE Events
SET EventDate = '2024-06-01', EventLocation = 'New Location'
WHERE EventID = 1;

-- Delete rows from table: 
DELETE from Employee
WHERE lineid = 1; 

-- Drop the entire Employee table: 
DROP TABLE Employee

-- Changing a table structure: (Add or Delete columns from a table)

--- To ADD a new column called 'Phone Number' to a table: 
ALTER TABLE Employee
ADD COLUMN Phone_Number VARCHAR(255) NOT NULL; 

--- To DELETE a new column called 'Email' from a table: 
ALTER Table Employee
DROP COLUMN Email; 

-- Create Relations: 
  -- Primary Key: The properties of a primary key are that each row is unique. Each row has a primary key
  -- Foreign Key: primary key of another table

-- Define Primary Key for a table: 
for table: Person_Data: ID INT NOT NULL PRIMARY KEY,

-- Define Foreign Key for table Orders
Orders PersonID INT FOREIGN KEY REFERENCE Person_Data(ID)

Primary Key:
A primary key is a column or set of columns in a table that uniquely identifies each row in the table. 
The primary key constraint ensures that the values in the primary key column(s) are unique and not null.
By default, primary key columns are indexed, which helps in faster data retrieval.
Here's an example of defining a primary key in SQL:

CREATE TABLE Students (
    StudentID INT PRIMARY KEY,
    FirstName VARCHAR(50),
    LastName VARCHAR(50),
    Age INT
);
In this example, StudentID is the primary key column of the Students table, ensuring that each student record is uniquely identified by their ID.

Foreign Key:
A foreign key is a column or set of columns in a child table that refers to the primary key or a unique key in a parent table. It establishes a relationship between two tables based on the values of these columns.
The foreign key constraint ensures referential integrity, meaning that values in the foreign key column(s) must match values in the corresponding primary key or unique key column(s) in the parent table, or they must be null.
In SQL, foreign keys are typically created using the FOREIGN KEY constraint.
Here's an example of defining a foreign key in SQL:

CREATE TABLE Courses (
    CourseID INT PRIMARY KEY,
    CourseName VARCHAR(100),
    InstructorID INT,
    FOREIGN KEY (InstructorID) REFERENCES Instructors(InstructorID)
);
In this example, InstructorID in the Courses table is a foreign key that references the InstructorID column in the Instructors table. This establishes a relationship where each course must have a valid instructor ID that exists in the Instructors table.

It's important to note that the referenced column(s) in the parent table must
have a unique constraint (either a primary key constraint or a unique constraint) 
for them to be used as the target of a foreign key constraint. 
Additionally, foreign keys can be used to implement different types of relationships,
such as one-to-many and many-to-many relationships, in a relational database model.




